#!/bin/bash
# Script para deploy manual do Ansible (executa no Bastion Host)
# Use este script se precisar fazer deploy manual sem o Jenkins

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ‚ùå $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')] ‚ÑπÔ∏è  $1${NC}"
}

# Banner
echo -e "${BLUE}"
cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                   üöÄ Deploy Manual                      ‚ïë
‚ïë              Ansible + Terraform Integration            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# Verifica se est√° no diret√≥rio correto
if [ ! -f "ansible.cfg" ]; then
    error "Execute este script no diret√≥rio ~/ansible/"
    exit 1
fi

# Verifica se a chave SSH existe
if [ ! -f ~/.ssh/id_rsa ]; then
    error "Chave SSH n√£o encontrada em ~/.ssh/id_rsa"
    echo "Execute primeiro: ./setup.sh"
    exit 1
fi

log "Iniciando processo de deploy..."

# 1. Testa invent√°rio din√¢mico
log "üîç Testando invent√°rio din√¢mico..."
if ansible-inventory --list > /dev/null 2>&1; then
    info "‚úÖ Invent√°rio din√¢mico funcionando"
    
    # Mostra resumo dos hosts
    echo ""
    info "üìã Hosts detectados:"
    ansible-inventory --graph
    echo ""
else
    warn "‚ùå Invent√°rio din√¢mico falhou, tentando invent√°rio est√°tico..."
    
    # Verifica se existe invent√°rio est√°tico
    if [ ! -f "hosts_static.ini" ]; then
        error "Nenhum invent√°rio dispon√≠vel. Execute o script setup_inventory.sh primeiro."
        exit 1
    fi
    
    # Atualiza ansible.cfg para usar invent√°rio est√°tico
    sed -i 's|inventory = ./aws_ec2.yml|inventory = ./hosts_static.ini|' ansible.cfg
    info "‚úÖ Usando invent√°rio est√°tico"
fi

# 2. Testa conectividade
log "üèì Testando conectividade com os hosts..."
if ansible all -m ping --ssh-common-args='-o ConnectTimeout=10' > /dev/null 2>&1; then
    info "‚úÖ Conectividade OK com todos os hosts"
else
    warn "‚ö†Ô∏è Alguns hosts podem n√£o estar acess√≠veis"
    echo ""
    info "Tentando conex√£o individual por grupo..."
    
    # Testa cada grupo individualmente
    for group in bastion application; do
        if ansible $group -m ping --ssh-common-args='-o ConnectTimeout=10' > /dev/null 2>&1; then
            info "‚úÖ Grupo '$group' acess√≠vel"
        else
            warn "‚ùå Grupo '$group' n√£o acess√≠vel"
        fi
    done
    echo ""
fi

# 3. Pergunta qual playbook executar
echo ""
info "üìö Playbooks dispon√≠veis:"
echo "  1) test-connectivity.yml - Testa conectividade e coleta informa√ß√µes"
echo "  2) playbook-nginx.yml - Instala e configura Nginx"
echo "  3) deploy-docker.yml - Deploy de container Docker"
echo ""

read -p "Escolha o playbook (1-3): " choice

case $choice in
    1)
        PLAYBOOK="test-connectivity.yml"
        DESCRIPTION="Teste de conectividade"
        ;;
    2)
        PLAYBOOK="playbook-nginx.yml"
        DESCRIPTION="Configura√ß√£o do Nginx"
        ;;
    3)
        PLAYBOOK="deploy-docker.yml"
        DESCRIPTION="Deploy Docker"
        read -p "Imagem Docker (padr√£o: nginx:latest): " docker_image
        read -p "Tag (padr√£o: latest): " docker_tag
        EXTRA_VARS="--extra-vars \"docker_image=${docker_image:-nginx:latest} docker_tag=${docker_tag:-latest}\""
        ;;
    *)
        error "Op√ß√£o inv√°lida"
        exit 1
        ;;
esac

# 4. Executa o playbook
log "üöÄ Executando: $DESCRIPTION"
echo ""

# Comando base do ansible-playbook
ANSIBLE_CMD="ansible-playbook $PLAYBOOK --ssh-common-args='-o StrictHostKeyChecking=no' -v"

# Adiciona extra vars se necess√°rio
if [ ! -z "$EXTRA_VARS" ]; then
    ANSIBLE_CMD="$ANSIBLE_CMD $EXTRA_VARS"
fi

# Executa o comando
eval $ANSIBLE_CMD

# 5. Resultado
if [ $? -eq 0 ]; then
    echo ""
    log "üéâ Deploy conclu√≠do com sucesso!"
    
    # Se foi deploy de aplica√ß√£o, mostra informa√ß√µes √∫teis
    if [[ "$PLAYBOOK" == *"nginx"* ]] || [[ "$PLAYBOOK" == *"docker"* ]]; then
        echo ""
        info "üîó Informa√ß√µes √∫teis:"
        echo "   ‚Ä¢ Para testar a aplica√ß√£o via ALB, use o DNS do Load Balancer"
        echo "   ‚Ä¢ Para verificar logs: ssh para as inst√¢ncias e rode 'sudo tail -f /var/log/nginx/error.log'"
        echo "   ‚Ä¢ Para verificar status: curl http://<instance-ip>/health"
    fi
    
    echo ""
    info "üìä Para monitorar:"
    echo "   ‚Ä¢ AWS Console: https://console.aws.amazon.com/"
    echo "   ‚Ä¢ Logs do Ansible: ./ansible.log"
    echo ""
    
else
    echo ""
    error "‚ùå Deploy falhou!"
    echo ""
    info "üîç Para debugar:"
    echo "   ‚Ä¢ Verifique os logs acima"
    echo "   ‚Ä¢ Teste conectividade: ansible all -m ping"
    echo "   ‚Ä¢ Verifique invent√°rio: ansible-inventory --list"
    echo "   ‚Ä¢ Execute em modo verbose: ansible-playbook $PLAYBOOK -vvv"
    echo ""
    exit 1
fi
