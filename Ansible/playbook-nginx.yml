---
# Playbook principal para configuraÃ§Ã£o do Nginx nas instÃ¢ncias de aplicaÃ§Ã£o
- name: Configure Nginx on Application Servers
  hosts: role_application, tier_application
  become: yes
  gather_facts: yes

  vars:
    nginx_port: 80
    app_name: "DevOps-Project"
    environment: "{{ ansible_ec2_tag_Environment | default('prod') }}"

  tasks:
    - name: Update system packages (Amazon Linux)
      yum:
        name: '*'
        state: latest
        update_cache: yes
      when: ansible_distribution == 'Amazon'

    - name: Update system packages (Ubuntu)
      apt:
        upgrade: dist
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_distribution == 'Ubuntu'

    - name: Install Nginx (Amazon Linux)
      yum:
        name: nginx
        state: present
      when: ansible_distribution == 'Amazon'

    - name: Install Nginx (Ubuntu)
      apt:
        name: nginx
        state: present
      when: ansible_distribution == 'Ubuntu'

    - name: Install additional packages
      package:
        name:
          - curl
          - wget
          - htop
          - git
        state: present

    - name: Create web directory
      file:
        path: /var/www/html
        state: directory
        owner: nginx
        group: nginx
        mode: '0755'

    - name: Generate custom index.html
      template:
        src: index.html.j2
        dest: /var/www/html/index.html
        owner: nginx
        group: nginx
        mode: '0644'
      notify: restart nginx

    - name: Configure Nginx
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: '0644'
        backup: yes
      notify: restart nginx

    - name: Create health check endpoint
      copy:
        content: |
          {
            "status": "healthy",
            "server": "{{ ansible_hostname }}",
            "environment": "{{ environment }}",
            "timestamp": "{{ ansible_date_time.iso8601 }}",
            "uptime": "{{ ansible_uptime_seconds }}s"
          }
        dest: /var/www/html/health
        owner: nginx
        group: nginx
        mode: '0644'

    - name: Configure firewall (Amazon Linux)
      firewalld:
        service: http
        permanent: yes
        state: enabled
        immediate: yes
      when: ansible_distribution == 'Amazon'
      ignore_errors: yes

    - name: Allow HTTP traffic (Ubuntu)
      ufw:
        rule: allow
        port: '80'
        proto: tcp
      when: ansible_distribution == 'Ubuntu'
      ignore_errors: yes

    - name: Start and enable Nginx
      systemd:
        name: nginx
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Wait for Nginx to be available
      wait_for:
        port: "{{ nginx_port }}"
        host: "{{ ansible_default_ipv4.address }}"
        delay: 5
        timeout: 30

    - name: Test Nginx is serving content
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ nginx_port }}"
        method: GET
        status_code: 200
      register: nginx_test
      retries: 3
      delay: 5

    - name: Test health endpoint
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ nginx_port }}/health"
        method: GET
        status_code: 200
      register: health_test
      retries: 3
      delay: 5

    - name: Display success message
      debug:
        msg: |
          âœ… Nginx configurado com sucesso!

          ðŸ“Š InformaÃ§Ãµes do servidor:
          â€¢ Hostname: {{ ansible_hostname }}
          â€¢ IP Privado: {{ ansible_default_ipv4.address }}
          â€¢ DistribuiÃ§Ã£o: {{ ansible_distribution }} {{ ansible_distribution_version }}
          â€¢ Nginx Status: {{ 'Funcionando' if nginx_test.status == 200 else 'Erro' }}
          â€¢ Health Check: {{ 'OK' if health_test.status == 200 else 'Erro' }}

  handlers:
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted
        daemon_reload: yes

    - name: reload nginx
      systemd:
        name: nginx
        state: reloaded

# VerificaÃ§Ã£o final
- name: Final verification
  hosts: localhost
  gather_facts: no

  tasks:
    - name: Show deployment summary
      debug:
        msg: |
          ðŸŽ‰ ConfiguraÃ§Ã£o do Nginx concluÃ­da!

          ðŸ“‹ PrÃ³ximos passos:
          1. Verifique o ALB no AWS Console
          2. Teste a aplicaÃ§Ã£o via Load Balancer
          3. Configure monitoramento se necessÃ¡rio

          ðŸ”— Para debugar:
          â€¢ SSH para o Bastion: ssh -i ~/.ssh/aws-key ubuntu@<bastion-ip>
          â€¢ Verificar logs: sudo tail -f /var/log/nginx/error.log